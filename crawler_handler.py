import logging 

from re import (
    compile, 
    IGNORECASE
)

from crawler.sources import (
    Source
)

from db import (
    create_connection,
    insert_data,
    find_id_by_params,
    update_data_by_id
)

log = logging.getLogger(__name__)
    
def crawler_handler(
    sources: list[Source]
) -> None:
    cpe_pattern = compile(
        "^cpe\:2\.3\:[aho]\:(\w{0,64})\:(\w{0,64})\:"
    )
    
    cwe_pattern = compile(
        "^[cwe][A-z, -]{0,2}(\d{1,4})$"
    )
    
    conn = create_connection()

    for source in sources:
        try:
            source_title = source['title']
            source_priority = source['priority']
            source_contents = source['content']
            
        except KeyError as kErr:
            log.error(
                f"SourceHandleError: {kErr}"
            )
            continue

        for source_content in source_contents:
            try:
                cve_name = source_content['cve_id']

                insert_data(
                    conn=conn,
                    table_name="Cve",
                    columns=['name'],
                    values=(cve_name, )
                )

                cve_id = find_id_by_params(
                    conn=conn,
                    table_name="Cve",
                    search_columns=["name"],
                    search_values=(cve_name, )
                )

                insert_data(
                    conn=conn,
                    table_name="Event",
                    columns=['source', 'cve_id'],
                    values=(source_title, cve_id)
                )

            except KeyError as kErr:
                log.error(
                    f"Failed to extract `cve_id` from parsed content ({source_title})."
                )
                continue

            try:
                published_date = source_content['published']
                if published_date:
                    update_data_by_id(
                        conn=conn,
                        table_name="Cve",
                        columns=["published_date"],
                        new_values=(published_date, ),
                        row_id=cve_id
                    )

            except KeyError as kErr:
                log.error(
                    f"Failed to extract `published_date` from parsed content ({source_title})."
                )

            try:
                description = source_content['description']
                insert_data(
                    conn=conn,
                    table_name="Description",
                    columns=['value', 'source', 'priority', 'cve_id'],
                    values=(description, source_title, source_priority, cve_id)
                )

            except KeyError as kErr:
                log.error(
                    f"Failed to extract `links` from parsed content ({source_title})."
                )

            try:
                link = source_content['links']
                insert_data(
                    conn=conn,
                    table_name="Link",
                    columns=['uri', 'cve_id'],
                    values=(link, cve_id)
                )

            except KeyError as kErr:
                log.error(
                    f"Failed to extract `links` from parsed content ({source_title})."
                )

            try:
                cvss = float(source_content['cvss'])
                if cvss:
                    update_data_by_id(
                        conn=conn,
                        table_name="Cve",
                        columns=["cvss"],
                        new_values=(cvss, ),
                        row_id=cve_id
                    )

            except KeyError as kErr:
                log.error(
                    f"Failed to extract `cvss` from parsed content ({source_title})."
                )

            try:
                cwe_content = source_content['cwe']
                cwe_number = int(
                    cwe_pattern.search(
                        cwe_content,
                        IGNORECASE,
                    ).group(1)
                )
                
                cwe_id = find_id_by_params(
                    conn=conn,
                    table_name="Cwe",
                    search_columns=["id"],
                    search_values=(cwe_number, )
                )

                update_data_by_id(
                        conn=conn,
                        table_name="Cve",
                        columns=["cwe_id"],
                        new_values=(cwe_id, ),
                        row_id=cve_id
                )

            except KeyError as kErr:
                log.error(
                    f"Failed to extract `cwe_id` from parsed content ({source_title})."
                )
            except AttributeError as aErr:
                log.error(
                    f"Check format of the `cwe_id` in parsed content ({source_title})."
                )

            try:
                cpe = source_content['cpe']
                cpe_regex = cpe_pattern.search(
                    string=cpe
                )
                
                vendor_name = cpe_regex.group(1)
                product_name = cpe_regex.group(2)
                
                insert_data(
                    conn=conn,
                    table_name="Vendor",
                    columns=["name"],
                    values=(vendor_name)
                )
            
                vendor_id = find_id_by_params(
                    conn=conn,
                    table_name="Vendor",
                    search_columns=["name"],
                    search_values=(vendor_name)
                )
                
                insert_data(
                    conn=conn,
                    table_name="Product",
                    columns=["name", "vendor_id"],
                    values=(product_name, vendor_id)
                )
            
                product_id = find_id_by_params(
                    conn=conn,
                    table_name="Product",
                    search_columns=["name"],
                    search_values=(product_name)
                )
                
                insert_data(
                    conn=conn,
                    table_name="Cpe",
                    columns=["value", "vendor_id", "product_id"],
                    values=(cpe, vendor_id, product_id)
                )

            except KeyError as kErr:
                log.error(
                    f"Failed to extract `cpe` from parsed content ({source_title})."
                )
            except Exception as exception:
                log.error(
                    f"Unexpected exception ({source_title}) was handled: {exception}."
                )