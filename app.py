from re import match

from flask import (
    Flask, 
    redirect, 
    render_template,
    url_for
)

from db import (
    create_connection,
    find_id_by_params,
    get_table_rows,
    execute_query
)

from crawler import (
    CrawlerManager
)

from crawler_handler import (
    crawler_handler
)

app = Flask(__name__)

@app.route('/')
def index():
    return redirect(
        url_for('about'), 
        code=302, 
        Response=None
    )

@app.route('/events')
def events():
    conn = create_connection()
    events = execute_query(
        conn=conn,
        query="SELECT Event.event_date, Cve.name, Event.source "\
            "FROM Event LEFT JOIN Cve ORDER BY Event.id DESC;",
    )

    return render_template(
        'events.html', 
        title="Events",
        header1=f"{len(events)} Events occurred during the program run",
        events=events
    )

@app.route('/vulnerabilities')
def vulnerabilities():
    conn = create_connection()
    cves = get_table_rows(
        conn=conn,
        table_name="Cve"
    )

    return render_template(
        'vulnerabilities.html', 
        title="Vulnerabilities",
        header1=f"{len(cves)} Vulnerabilities were crawled and parsed",
        cves=cves
    )

@app.route('/cve/<cve_id>')
def cve(cve_id: str):
    conn = create_connection()

    regex_check = match(
        r"[C,c][V,v][E,e]\-\d{4}\-\d{2,5}",
        cve_id
    )

    if not regex_check:
        return render_template(
            'content.html', 
            title="Page Not Found",
            header1=f"Cve {str(cve_id)} was not found in base",
            content="We apologize, this Cve is not in the database, \
                most likely it was not processed by this mechanism \
                due to not being in the time slot. \
                If you are trying to phase this page on purpose, \
                please give up, it's a silly idea"
        )

    found_cve_id = find_id_by_params(
        conn=conn,
        table_name='Cve',
        search_columns=['name'],
        search_values=(cve_id,)
    )

    cve_info = execute_query(
        conn=conn,
        query=f"SELECT * from Cve WHERE id={found_cve_id}"
    )[0][2:]

    descriptions = execute_query(
        conn=conn,
        query=f"SELECT * from Description WHERE cve_id={found_cve_id}\
            ORDER BY priority ASC;"
    )
    
    return render_template(
        'cve_page.html', 
        title=f"{cve_id}",
        header1=f"Vulnerability {str(cve_id)} information",
        cve_info=cve_info,
        descriptions=descriptions
    )

@app.route('/cwe/<cwe_id>')
def cwe(cwe_id: str):
    conn = create_connection()

    regex_check = match(
        r"\d{1,4}",
        cwe_id
    )

    error_page = render_template(
        'content.html', 
        title="Page Not Found",
        header1=f"CWE-{str(cwe_id)} was not found in base",
        content="We apologize, this CWE is not in the database"
    )

    if not regex_check:
        return error_page

    cwe = execute_query(
        conn=conn,
        query=f"SELECT * from Cwe WHERE id={cwe_id}"
    )

    if not cwe:
        return error_page

    cwe = cwe[0]

    return render_template(
        'content.html',
        title=f"CWE-{str(cwe_id)}",
        header1=f"CWE-{cwe[0]} information",
        content=cwe[1]
    )

@app.route('/about')
def about():
    return render_template(
        'content.html', 
        title="About",
        header1="Page about project",
        content="The project is aimed at collecting \
            and centralizing vulnerability data (CVE) \
            from various sources. It aims to provide \
            convenient access to vulnerability information, \
            assisting users in quickly obtaining up-to-date \
            data."
    )

@app.route('/update')
def update():
    cm = CrawlerManager()
    
    crawler_handler(
        sources=cm.crawl_sources()
    )
    
    return redirect(
        url_for('events'), 
        code=302, 
        Response=None
    )