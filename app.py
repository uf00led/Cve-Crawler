from multiprocessing import Process
from re import match

from flask import (
    Flask, 
    redirect, 
    render_template,
    url_for,
    request
)

from db import (
    create_connection,
    find_id_by_params,
    execute_query,
    insert_data
)

from crawler import (
    CrawlerManager
)

from crawler_handler import (
    crawler_handler
)

app = Flask(__name__)

@app.route('/events')
def events():
    conn = create_connection()
    events = execute_query(
        conn=conn,
        query="SELECT Event.event_date, Cve.name, Event.source "\
            "FROM Event LEFT JOIN Cve ORDER BY Event.id DESC;",
    )

    return render_template(
        'events.html', 
        title="Events",
        header1=f"{len(events)} Events occurred during the program run",
        events=events
    )

@app.route('/vulnerabilities')
def vulnerabilities():
    conn = create_connection()

    cves = execute_query(
        conn=conn,
        query="SELECT name, cvss, belonging, cwe_id, published_date FROM Cve;",
    )

    return render_template(
        'vulnerabilities.html', 
        title="Vulnerabilities",
        header1=f"{len(cves)} Vulnerabilities were crawled and parsed",
        cves=cves
    )

@app.route('/cve/<cve_id>', methods=['GET', 'POST'])
def cve(cve_id: str):
    conn = create_connection()

    regex_check = match(
        r"^[Cc][Vv][Ee]\-\d{4}\-\d{2,5}$",
        cve_id
    )

    cve_not_found_page = render_template(
        'page_not_found.html', 
        title="Page Not Found",
        header1=f"Cve was not found in base"
    )

    if not regex_check:
        return cve_not_found_page

    found_cve_id = find_id_by_params(
        conn=conn,
        table_name='Cve',
        search_query={
            'name': cve_id
        }
    )

    if not found_cve_id:
        return cve_not_found_page

    query_technique_id = request.args.get('technique')
    if query_technique_id:
        found_technique_id = find_id_by_params(
            conn=conn,
            table_name='MitreTechnique',
            search_query={
                'technique_id': query_technique_id
            }
        )
        
        if found_technique_id:
            insert_data(
                conn=conn,
                table_name='CveTechnique',
                query={
                    'cve_id': found_cve_id, 
                    'technique_id': found_technique_id
                }
            )
    
    cve_info = execute_query(
        conn=conn,
        query="SELECT cvss, belonging, cwe_id, published_date, name FROM Cve WHERE id=?",
        values=[found_cve_id],
        is_one=True
    )

    descriptions = execute_query(
        conn=conn,
        query="SELECT * from Description WHERE cve_id=? ORDER BY priority ASC;",
        values=[found_cve_id]
    )

    techniques = execute_query(
        conn=conn,
        query="SELECT technique_id, name FROM MitreTechnique WHERE id IN "\
        "(SELECT technique_id FROM CveTechnique WHERE cve_id = ?);",
        values=[found_cve_id]
    )

    links = execute_query(
        conn=conn,
        query="SELECT uri FROM Link WHERE cve_id=?;",
        values=[found_cve_id]
    )

    return render_template(
        'cve_page.html', 
        title=f"{cve_id}",
        header1=f"Vulnerability {cve_id} information",
        cve_info=cve_info,
        descriptions=descriptions,
        techniques=techniques,
        links=links
    )

@app.route('/search_cve', methods=['GET'])
def search_cve():
    query = request.args.get('query')
        
    conn = create_connection()
    response = execute_query(
        conn=conn,
        query="SELECT name, published_date FROM Cve WHERE id IN "\
        "(SELECT cve_id FROM Description WHERE value LIKE '%' || ? || '%');",
        values=[query]
    )

    return render_template(
        'cve_search.html', 
        title="Search CVE",
        header1=f"Results for query: {query}",
        cves=response
    )

@app.route('/cwe/<cwe_id>')
def cwe(cwe_id: str):
    conn = create_connection()

    regex_check = match(
        r"^\d{1,4}$",
        cwe_id
    )

    error_page = render_template(
        'page_not_found.html', 
        title="Page Not Found",
        header1="CWE was not found in base"
    )

    if not regex_check:
        return error_page

    cwe = execute_query(
        conn=conn,
        query=f"SELECT id, description from Cwe WHERE id=?",
        values=[cwe_id],
        is_one=True
    )

    if not cwe:
        return error_page

    title=f"CWE-{cwe_id}"
    header=f"CWE-{cwe_id} information"
    content=cwe['description']

    return render_template(
        'content.html',
        title=title,
        header1=header,
        content=content
    )

@app.route('/techniques/<technique_id>')
def techniques(technique_id: str):
    conn = create_connection()

    regex_check = match(
        r"^T\d{4}$",
        technique_id
    )

    error_page = render_template(
        'page_not_found.html', 
        title="Page Not Found",
        header1="Technique was not found in base"
    )

    if not regex_check:
        return error_page

    found_technique_id = find_id_by_params(
        conn=conn,
        table_name='MitreTechnique',
        search_query={
            'technique_id': technique_id
        }
    )

    if not found_technique_id:
        return error_page

    technique = execute_query(
        conn=conn,
        query="SELECT technique_id, name, description, belonging "\
        "from MitreTechnique WHERE id=?",
        values=[found_technique_id],
        is_one=True
    )

    title = f"{technique['name']} ({technique['technique_id']})"
    header = f"{technique['name']} ({technique['technique_id']}) - {technique['belonging']}"
    content=technique['description']

    return render_template(
        'content.html',
        title=title,
        header1=header,
        content=content
    )

@app.route('/')
@app.route('/about')
def about():
    return render_template(
        'about.html', 
        title="About",
        header1="Page about project"
    )

@app.route('/update')
def update():
    cm = CrawlerManager()
    
    crawler_handler(
        sources=cm.crawl_sources()
    )

    return redirect(
        url_for('events'), 
        code=302, 
        Response=None
    )