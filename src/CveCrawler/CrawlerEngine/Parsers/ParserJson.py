from .IParser import IParser

class ParserJson(IParser):
    def __init__(
        self,      
    ) -> None:
        pass

    def parse(
        self,
        data: dict,
        fields: dict,
    ) -> dict:    
        """
        data = {
            Nested: {
                One: {
                    ...
                }
                Another: [
                        Item_1,
                        Item_2,
                        ...
                        Item_n,
                    ]
                }
            }
        }

        fields = {
            name_1: Nested.One
            name_2: Nested.Another
            ...
            name_n: Nested
        }
        """
        result = {}
        for field, path in fields.items():
            result[field] = self._search(
                data=data,
                path=path
            )
        return result

    def _search(
        data: dict,
        path: str,
        sep: str = "."
    ) -> str: # or dict/list
        tmp_data = data
        path_list = path.split(sep)
        
        try:
            for node in path_list:
                tmp_data = tmp_data[node]
        except:
            pass