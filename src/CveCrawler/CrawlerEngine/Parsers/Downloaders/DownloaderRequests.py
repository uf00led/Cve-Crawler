from .IDownloader import IDownloader
from .HttpHeaders import Headers

import requests
import logging

log = logging.getLogger(__name__)

class DownloaderRequests(IDownloader):
    """An inheritor of the `IDownloader`, which provides the 
    ability to download site content via a `requests` package

    :param base_url: Based URL, which will probably be 
        supplemented with payloads 
    :type base_url: str
    """
    def __init__(
        self,
        base_url: str,
        headers: dict = Headers.Chrome()
    ) -> None:
        """Constructor method.
        Internally adds Chrome Browser Headers.
        """
        self._base_url = base_url
        self._headers = headers
        
    def download(
        self,
        timeout: int = 60,
        is_json: bool = False,
        payload: dict = None,
        cookies: dict = None,
    ) -> str:
        """This function is the main function of this `Downloader`. And, 
        as you can guess, it performs the downloading of site content.
        
        :param timeout: the amount of time the connection can be active
            before receiving a response, defaults to 60
        :type timeout: int, optional
        
        :param is_json: convert processed value format to json (dict), 
            defaults to False
        :type payload: bool, optional
        
        :param payload: Parameters to be passed in the GET request, 
            defaults to None
        :type payload: dict, optional
        
        :param cookies: Cookies for the site, defaults to None
        :type cookies: dict, optional
        
        :return: content from a GET request to the site
        :rtype: dict if success, else NoneType
        """
        try:
            r = requests.get(
                url=self._base_url,
                headers=self._headers,
                params=payload,
                cookies=cookies,
                timeout=timeout,
            )
            r.raise_for_status()
        
        except requests.exceptions.HTTPError as errH:
            log.error(
                f"HTTPError: {self._base_url} was got with {errH.response.status_code}",
            )
            return
        except requests.exceptions.ConnectionError as errC:
            log.error(
                f"ConnectionError: Can\'t connect to the {self._base_url}.",
            )
            return
        except requests.exceptions.Timeout as errT:
            log.error(
                f"Timeout: No response was received from {self._base_url} in {timeout}s.",
            )
            return
        except requests.exceptions.RequestException as err:
            log.error(
                f"RequestException: Exception was thrown {self._base_url}. {err}",
            )
            return
    
        try:    
            return r.json() if is_json else r.text
        
        except requests.exceptions.JSONDecodeError:
            log.error(
                f"JSONDecodeError: Failed to decode the response from {self._base_url} "\
                f"into JSON.",
            )
            return