import logging
from typing import Optional

import requests

from .IDownloader import IDownloader
from .HttpHeaders import Headers

log = logging.getLogger(__name__)

class DownloaderRequests(IDownloader):
    """An inheritor of the `IDownloader`, which provides the 
    ability to download site content via a `requests` package

    :param seed_url: Based URL, which will probably be 
        supplemented with payloads 
    :type seed_url: str

    :param timeout: the amount of time the connection can be active
        before receiving a response, defaults to 60
    :type timeout: int, optional  
    
    :param headers: A dictionary of headers with which to 
        request a response from the web server.
    :type headers: dict  

    :param cookies: Cookies for the site, defaults to None
    :type cookies: dict, optional
    """
    def __init__(
        self,
        seed_url: str,
        timeout: int = 60,
        payload: dict = None,
        headers: dict = Headers.Chrome(),
        cookies: dict = None
    ) -> None:
        """Constructor method.
        Internally adds Google Chrome Browser Headers.
        """
        self._seed_url = seed_url
        self._timeout = timeout
        self._headers = headers
        self._cookies = cookies

    def download(
        self,
        payload: dict
    ) -> Optional[str]:
        """This function is the main function of this `Downloader`. And, 
        as you can guess, it performs the downloading of site content.
            
        :param payload: Parameters to be passed in the GET request, 
            defaults to None
        :type payload: dict, optional
        
        :return: content from a GET request to the site
        :rtype: dict if success, else NoneType
        """
        try:
            r = requests.get(
                url=self._seed_url,
                headers=self._headers,
                params=payload,
                cookies=self._cookies,
                timeout=self._timeout,
            )
            r.raise_for_status()
            return r.text
        
        except requests.exceptions.HTTPError as errH:
            log.error(
                f"HTTPError: {self._seed_url} was got with {errH.response.status_code}.",
            )
            return
        except requests.exceptions.ConnectionError as errC:
            log.error(
                f"ConnectionError: Can\'t connect to the {self._seed_url}.",
            )
            return
        except requests.exceptions.Timeout as errT:
            log.error(
                f"Timeout: No response was received from {self._seed_url} in {self._timeout}s.",
            )
            return
        except requests.exceptions.RequestException as err:
            log.error(
                f"RequestException: Exception was thrown {self._seed_url}. {err}",
            )
            return