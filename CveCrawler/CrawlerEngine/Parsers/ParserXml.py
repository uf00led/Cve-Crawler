import logging
from xmltodict import parse as XMLParse

from .IParser import IParser
from .Utils import search, extract

log = logging.getLogger(__name__)

class ParserXml(IParser):
    """An inheritor of the `IParser`, which provides the
    ability to parse given XML to the list of the requested 
    fields.

    :param sep: separator in the fields paths
    :type sep: str
    """
    def __init__(
        self,
        sep: str = "."
    ) -> None:
        """Constructor method."""
        self._sep = sep

    def parse(
        self,
        root: str,
        data: str,
        fields: dict,
    ) -> dict:    
        """This function is the main function of this `Parser`. And, 
        as you can guess, it performs the parsing of XML content.
        
        :param data: string with the data to be searched for
        :type data: str
        
        :param fields: dictionary of correspondence between names 
            of extracted parameters and paths to these parameters
        :type fields: dict
        
        :return: data dictionary from the given paths
        :rtype: dict if success, else NoneType (PEP3107)
        """

        try:
            data_dict = XMLParse(data)

        except Exception as exception:
            log.error(
                f"XMLDecodeError: Failed to decode the data into XML. {exception}"
            )
            return
        
        root_dict = search(
            data=data_dict,
            path=root,
            sep=self._sep
        )

        parsed_data = extract(
            data=root_dict,
            fields=fields,
            sep=self._sep
        )

        return parsed_data