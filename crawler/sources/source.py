from typing import Optional
from dataclasses import dataclass

from datetime import (
    datetime, timedelta
)

from ..downloaders import (
    IDownloader
)

from ..parsers import (
    IParser
)

@dataclass
class Source:
    title: str
    priority: int
    cooldown: int
    payload: dict
    downloader: IDownloader
    parser: IParser
    
    def download(
        self
    ) -> Optional[str]:
        current_time = datetime.now()
        
        current_payload = {
            k:v if not isinstance(v, timedelta) 
            else (current_time - v).isoformat() 
            for k,v in self.payload.items()
        }

        content = self.downloader.download(
            payload=current_payload,
        )
        return content

    def parse(
        self,
        content: str
    ) -> Optional[dict]:
        parsed = self.parser.parse(
            data=content
        )
        return parsed