import unittest

from crawler.parsers.utils import (
    search,
    extract
)

class ParserUtilsTestCases(unittest.TestCase):
    def setUp(
        self
    ) -> None:
        self._data = {
            "Nested":
            [
                {
                    'Inner_Int': 0,
                    'Inner_Dict': {
                        'Inner_Value': 10
                    }, 
                    'Inner_List': [
                        'Hello', 'Alice'
                    ]
                },
                {
                    'Inner_Int': 1, 
                    'Inner_Dict': {
                        'Inner_Value': 20
                    }, 
                    'Inner_List': [
                        'Hello', 'Bob'
                    ]
                }
            ]
        }

    def test_search_with_bad_params(
        self
    ) -> None:
        search_result_empty_path = search(
            data=self._data,
            path=str()
        )
        
        self.assertEqual(
            search_result_empty_path, 
            self._data,
        )

        search_result_empty_data = search(
            data=dict(),
            path="Nested"
        )

        self.assertIsNone(
            search_result_empty_data,
        )

    def test_search(
        self
    ) -> None:
        search_result_nested = search(
            data=self._data,
            path="Nested"
        )
        self.assertEqual(
            search_result_nested,
            self._data['Nested']
        )

        data_inner = self._data['Nested'][0]
        search_result_inner_int = search(
            data=data_inner,
            path="Inner_Int"
        )
        self.assertEqual(
            search_result_inner_int,
            0
        )
        
        search_result_inner_dict = search(
            data=data_inner,
            path="Inner_Dict.Inner_Value"
        )
        self.assertEqual(
            search_result_inner_dict,
            10
        )

        search_result_inner_list = search(
            data=data_inner,
            path="Inner_List"
        )
        self.assertEqual(
            search_result_inner_list,
            ['Hello', 'Alice']
        )

    def test_extract(
        self
    ) -> None:
        correct_fields = {
            'Inner_Int': 'Inner_Int',
            'Inner_Value': 'Inner_Dict.Inner_Value',
            'Inner_List': 'Inner_List'
        }

        incorrect_fields = {
            'Inner_Int': 'Nested.Inner_Int',
            'Inner_Value': 'Nested.Inner_Dict.Inner_Value',
            'Inner_List': 'Nested.Inner_List'
        }
        
        nested_data = self._data['Nested']
        extract_result_correct = extract(
            data=nested_data,
            fields=correct_fields
        )
        self.assertEqual(
            extract_result_correct,
            [
                {
                    'Inner_Int': 0,
                    'Inner_Value': 10,
                    'Inner_List': ['Hello', 'Alice']
                },
                {
                    'Inner_Int': 1,
                    'Inner_Value': 20,
                    'Inner_List': ['Hello', 'Bob']
                },
            ]
        )

        extract_result_incorrect = extract(
            data=nested_data,
            fields=incorrect_fields
        )
        self.assertEqual(
            extract_result_incorrect,
            list()
        )